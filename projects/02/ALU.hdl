// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
  IN
  x[16], y[16],  // 16-bit inputs
  zx, // zero the x input?
  nx, // negate the x input?
  zy, // zero the y input?
  ny, // negate the y input?
  f,  // compute out = x + y (if 1) or x & y (if 0)
  no; // negate the out output?

  OUT
  out[16], // 16-bit output
  zr, // 1 if (out == 0), 0 otherwise
  ng; // 1 if (out < 0),  0 otherwise

  PARTS:

  // zx
  Mux16 (a=x, b=false, sel=zx, out=zxResult);

  // nx
  Not16 (in=zxResult, out=notX);
  Mux16 (a=zxResult, b=notX, sel=nx, out=nxResult);

  // zy
  Mux16 (a=y, b=false, sel=zy, out=zyResult);

  // ny
  Not16 (in=zyResult, out=notZY);
  Mux16 (a=zyResult, b=notZY, sel=ny, out=nyResult);

  // f
  Add16 (a=nxResult, b=nyResult, out=APlusB);
  And16 (a=nxResult, b=nyResult, out=AAndB);
  Mux16 (a=AAndB, b=APlusB, sel=f, out=fResult);

  // no
  Not16 (in=fResult, out=notFResult);
  Mux16 (a=fResult, b=notFResult, sel=no, out=out, out[0]=tempOut0, out[1]=tempOut1, out[2]=tempOut2, out[3]=tempOut3, out[4]=tempOut4, out[5]=tempOut5, out[6]=tempOut6, out[7]=tempOut7, out[8]=tempOut8, out[9]=tempOut9, out[10]=tempOut10, out[11]=tempOut11, out[12]=tempOut12, out[13]=tempOut13, out[14]=tempOut14, out[15]=tempOut15, out[15]=ng);

  // zr
  Or (a=tempOut0, b=tempOut1, out=or0);
  Or (a=or0, b=tempOut2, out=or1);
  Or (a=or1, b=tempOut3, out=or2);
  Or (a=or2, b=tempOut4, out=or3);
  Or (a=or3, b=tempOut5, out=or4);
  Or (a=or4, b=tempOut6, out=or5);
  Or (a=or5, b=tempOut7, out=or6);
  Or (a=or6, b=tempOut8, out=or7);
  Or (a=or7, b=tempOut9, out=or8);
  Or (a=or8, b=tempOut10, out=or9);
  Or (a=or9, b=tempOut11, out=or10);
  Or (a=or10, b=tempOut12, out=or11);
  Or (a=or11, b=tempOut13, out=or12);
  Or (a=or12, b=tempOut14, out=or13);
  Or (a=or13, b=tempOut15, out=or14);
  Not (in=or14, out=zr);
}
