// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {
  IN  inM[16],         // M value input  (M = contents of RAM[A])
  instruction[16], // Instruction for execution
  reset;           // Signals whether to re-start the current
  // program (reset==1) or continue executing

  OUT outM[16],        // M value output
  writeM,          // Write to M?
  addressM[15],    // Address in data memory (of M)
  pc[15];          // address of next instruction

  PARTS:

  Mux16 (a=instruction, b=aluOut, sel=instruction[15], out=muxInstrALU);
  Mux16 (a=aRegisterOut, b=inM, sel=instruction[12], out=muxaRegisterOutinM);
  Not (in=instruction[15], out=notInstruction15);
  Or (a=notInstruction15, b=instruction[5], out=aRegisterLoad);
  ARegister (in=muxInstrALU, load=aRegisterLoad, out=aRegisterOut, out[0..14]=addressM);
  And (a=instruction[4], b=instruction[15], out=dRegisterLoad);
  DRegister (in=aluOut, load=dRegisterLoad, out=dRegisterOut);
  ALU (x=dRegisterOut, y=muxaRegisterOutinM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], zr=zr, ng=ng, out=outM, out=aluOut);
  And (a=instruction[3], b=instruction[15], out=writeM);
  Not (in=zr, out=notzr);
  Not (in=ng, out=notng);
  And (a=notzr, b=notng, out=notzrAndNotng);
  And (a=notzrAndNotng, b=instruction[0], out=JGT);
  And (a=zr, b=instruction[1], out=JEQ);
  And (a=instruction[1], b=instruction[0], out=instruction1And0);
  Or (a=zr, b=notzrAndNotng, out=zrOrNotzrAndNotng);
  And (a=instruction1And0, b=zrOrNotzrAndNotng, out=JGE);
  And (a=instruction[2], b=ng, out=JLT);
  And (a=instruction[2], b=instruction[0], out=instruction2And0);
  And (a=instruction2And0, b=notzr, out=JNE);
  And (a=instruction[2], b=instruction[1], out=instruction2And1);
  Or (a=zr, b=ng, out=zrOrng);
  And (a=instruction2And1, b=zrOrng, out=JLE);
  And (a=instruction2And1, b=instruction[0], out=JMP);
  Or (a=JGT, b=JEQ, out=JGTorJEQ);
  Or (a=JGE, b=JLT, out=JGEorJLT);
  Or (a=JNE, b=JLE, out=JNEorJLE);
  Or (a=JGTorJEQ, b=JGEorJLT, out=or1);
  Or (a=JNEorJLE, b=or1, out=or2);
  Or (a=or2, b=JMP, out=or2OrJMP);
  And (a=or2OrJMP, b=instruction[15], out=pcLoad);
  PC (in=aRegisterOut, reset=reset, inc=true, load=pcLoad, out[0..14]=pc);
}
