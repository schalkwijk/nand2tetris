class GameOfLifeEngine {

  field Cursor cursor;
  field Grid grid;
  field int rowCount;
  field int colCount;
  field GridPainter gridPainter;

  constructor GameOfLifeEngine new() {
    let rowCount = 15;
    let colCount = 32;
    let cursor = Cursor.new(rowCount, colCount);
    let gridPainter = GridPainter.new(cursor);
    let grid = Grid.new(rowCount, colCount, gridPainter);

    return this;
  }

  method void run() {
    var char key;
    var char previousKey;
    var Grid newGrid;
    var boolean exit;

    let exit = false;
    do printBanner();
    do drawCursor();

    while (~exit) {
      let key = Keyboard.keyPressed();

      while ((~(key = 0)) & (~exit)) {
        if(key = 81) { let exit = true; }

        // move cursor
        if((key > 129) & (key < 134)) {
          do clearCursor();
          do cursor.move(key - 130);
          do drawCursor();
          do Sys.wait(100);
        }

        // toggle
        if(key = 84 & ~(previousKey = 84)) {
          do grid.toggle(cursor.getRow(), cursor.getCol());
          do Sys.wait(60);
        }

        // next cycle
        if(key = 78) {
          let newGrid = grid.tick();
          do grid.dispose();
          let grid = newGrid;
        }

        let previousKey = key;
        let key = Keyboard.keyPressed();
      }
    }

    do cursor.dispose();
    do grid.dispose();
    return;
  }

  method void printBanner() {
    do Output.moveCursor(22, 0);
    do Output.printString("Game Of Life | ");
    do Output.printString("Arrows To Move | ");
    do Output.printString("[T]oggle Square | ");
    do Output.printString("[N]ext Cycle");
    do Screen.drawLine(0, 241, 511, 241);

    return;
  }

  method void clearCursor() {
    var int row;
    var int col;
    var boolean squareIsAlive;

    let row = cursor.getRow();
    let col = cursor.getCol();
    let squareIsAlive = grid.alive(row, col);

    if(~squareIsAlive) {
      do gridPainter.paintSquare(false, row, col);
    }

    return;
  }

  method void drawCursor() {
    var int row;
    var int col;
    var boolean squareIsAlive;

    let row = cursor.getRow();
    let col = cursor.getCol();

    let squareIsAlive = grid.alive(row, col);
    if(~squareIsAlive) {
      do gridPainter.paintCursor(row, col);
    }

    return;
  }

  method void dispose() {
    do cursor.dispose();
    do gridPainter.dispose();
    do grid.dispose();
    return;
  }

}
