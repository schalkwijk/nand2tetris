class Grid {

  field Array grid;
  field int rowCount;
  field int colCount;

  constructor Grid new(int rc, int cc) {
    let rowCount = rc;
    let colCount = cc;
    let grid = Array.new(colCount);

    do initialize();
    return this;
  }

  method void initialize() {
    var int scratchColCount;
    var int scratchRowCount;
    var Array rowArray;

    let scratchColCount = colCount;
    while(~(scratchColCount = 0)) {
      let scratchRowCount = rowCount;
      let rowArray = Array.new(rowCount);
      let grid[scratchColCount - 1] = rowArray;
      while(~(scratchRowCount = 0)) {
       let rowArray[scratchRowCount - 1] = Square.new();
       let scratchRowCount = scratchRowCount - 1;
      }
      let scratchColCount = scratchColCount - 1;
    }

    return;
  }

  method void toggle(int row, int col) {
    var Square curSquare;
    let curSquare = getSquare(row, col);

    do curSquare.toggle();
    do paintSquare(curSquare.alive(), row, col);

    return;
  }

  method Grid tick() {
    var Grid newGrid;
    var int scratchColCount;
    var int scratchRowCount;
    var Array rowArray;
    var boolean shouldAwaken;

    let newGrid = Grid.new(rowCount, colCount);

    let scratchColCount = colCount;
    while(~(scratchColCount = 0)) {
      let scratchRowCount = rowCount;
      let scratchColCount = scratchColCount - 1;
      let rowArray = grid[scratchColCount];

      while(~(scratchRowCount = 0)) {
        let scratchRowCount = scratchRowCount - 1;
        let shouldAwaken = calculateNextState(scratchRowCount, scratchColCount);
        if(shouldAwaken) {
          do newGrid.awaken(scratchRowCount, scratchColCount);
        } else {
          do kill(scratchRowCount, scratchColCount);
        }
      }
    }

    return newGrid;
  }

  method boolean calculateNextState(int row, int col) {
    var int numberOfLiveNeighbors;
    var Square curSquare;
    let numberOfLiveNeighbors = 0;

    let numberOfLiveNeighbors = numberOfLiveNeighbors + isAlive(row - 1, col);
    let numberOfLiveNeighbors = numberOfLiveNeighbors + isAlive(row - 1, col - 1);
    let numberOfLiveNeighbors = numberOfLiveNeighbors + isAlive(row - 1, col + 1);

    let numberOfLiveNeighbors = numberOfLiveNeighbors + isAlive(row + 1, col);
    let numberOfLiveNeighbors = numberOfLiveNeighbors + isAlive(row + 1, col - 1);
    let numberOfLiveNeighbors = numberOfLiveNeighbors + isAlive(row + 1, col + 1);

    let numberOfLiveNeighbors = numberOfLiveNeighbors + isAlive(row, col - 1);
    let numberOfLiveNeighbors = numberOfLiveNeighbors + isAlive(row, col + 1);

    if((numberOfLiveNeighbors < 2) | (numberOfLiveNeighbors > 3)) {
      return false;
    } else {
      let curSquare = getSquare(row, col);
      if(curSquare.alive()) {
        return true;
      } else {
        if(numberOfLiveNeighbors = 3) {
          return true;
        }
        return false;
      }
    }
  }

  method int isAlive(int row, int col) {
    var Square curSquare;

    if((row < rowCount) & (row > -1)) {
      if((col < colCount) & (col > -1)) {
      } else {
        return 0;
      }
    } else {
      return 0;
    }

    let curSquare = getSquare(row, col);
    if (curSquare.alive()) {
      return 1;
    } else {
      return 0;
    }
  }

  method void awaken(int row, int col) {
    var Square curSquare;

    let curSquare = getSquare(row, col);
    do curSquare.awaken();
    do paintSquare(true, row, col);

    return;
  }

  method void kill(int row, int col) {
    do paintSquare(false, row, col);
    return;
  }

  method Square getSquare(int row, int col) {
    var Square curSquare;
    var Array curCol;

    let curCol = grid[col];
    let curSquare = curCol[row];

    return curSquare;
  }

  method void clearUnlessAlive(int row, int col) {
    var Square curSquare;
    var boolean curSquareIsAlive;
    var Array curCol;

    let curCol = grid[col];
    let curSquare = curCol[row];

    if(~(curSquare.alive())) {
      do paintSquare(false, row, col);
    }
    return;
  }

  method void paintSquare(boolean color, int row, int col) {
    do Screen.setColor(color);
    do Screen.drawRectangle(col * 16, row * 16, col * 16 + 15, row * 16 + 15);
    return;
  }

  method void dispose() {
    var int scratchColCount;
    var int scratchRowCount;
    var Array rowArray;
    var Square curSquare;

    let scratchColCount = colCount;
    while(~(scratchColCount = 0)) {
      let scratchColCount = scratchColCount - 1;
      let rowArray = grid[scratchColCount];

      let scratchRowCount = rowCount;
      while(~(scratchRowCount = 0)) {
        let scratchRowCount = scratchRowCount - 1;
        let curSquare = rowArray[scratchRowCount];
        do curSquare.dispose();
      }

      do rowArray.dispose();
    }

    do grid.dispose();
    do Memory.deAlloc(this);
    return;
  }

}
