class Grid {

  field Array grid;
  field int rowCount;
  field int colCount;
  field GridPainter gridPainter;

  constructor Grid new(int rc, int cc, GridPainter painter) {
    let rowCount = rc;
    let colCount = cc;
    let grid = Array.new(colCount);
    let gridPainter = painter;

    do initialize();
    return this;
  }

  method void initialize() {
    var int scratchColCount;
    var int scratchRowCount;
    var Array rowArray;

    let scratchColCount = colCount;
    while(~(scratchColCount = 0)) {
      let scratchRowCount = rowCount;
      let rowArray = Array.new(rowCount);
      let grid[scratchColCount - 1] = rowArray;
      while(~(scratchRowCount = 0)) {
        let rowArray[scratchRowCount - 1] = Square.new();
        let scratchRowCount = scratchRowCount - 1;
      }
      let scratchColCount = scratchColCount - 1;
    }

    return;
  }

  method void toggle(int row, int col) {
    var Square curSquare;
    let curSquare = getSquare(row, col);

    do curSquare.toggle();
    if(curSquare.alive()) {
      do gridPainter.drawSquare(row, col);
    } else {
      do gridPainter.clearSquare(row, col);
    }

    return;
  }

  method Grid tick() {
    var Grid newGrid;
    var int scratchColCount;
    var int scratchRowCount;
    var Array rowArray;
    var boolean shouldAwaken;

    let newGrid = Grid.new(rowCount, colCount, gridPainter);

    let scratchColCount = colCount;
    while(~(scratchColCount = 0)) {
      let scratchRowCount = rowCount;
      let scratchColCount = scratchColCount - 1;
      let rowArray = grid[scratchColCount];

      while(~(scratchRowCount = 0)) {
        let scratchRowCount = scratchRowCount - 1;
        let shouldAwaken = calculateNextState(scratchRowCount, scratchColCount);
        if(shouldAwaken) {
          // awaken cell in new grid, which includes drawing it on screen
          do newGrid.awaken(scratchRowCount, scratchColCount);
        } else {
          // we just really want to clear out the square
          // on the screen here - no need to kill it on the
          // new grid because dead is default
          do gridPainter.clearSquare(scratchRowCount, scratchColCount);
        }
      }
    }

    return newGrid;
  }

  method boolean calculateNextState(int row, int col) {
    var int numberOfLiveNeighbors;
    var Square curSquare;
    let numberOfLiveNeighbors = 0;

    // this is normally done with an array of tuples, but jack
    // doesn't have built-in semantics for static array generation
    let numberOfLiveNeighbors = numberOfLiveNeighbors + isAlive(row - 1, col);
    let numberOfLiveNeighbors = numberOfLiveNeighbors + isAlive(row - 1, col - 1);
    let numberOfLiveNeighbors = numberOfLiveNeighbors + isAlive(row - 1, col + 1);

    let numberOfLiveNeighbors = numberOfLiveNeighbors + isAlive(row + 1, col);
    let numberOfLiveNeighbors = numberOfLiveNeighbors + isAlive(row + 1, col - 1);
    let numberOfLiveNeighbors = numberOfLiveNeighbors + isAlive(row + 1, col + 1);

    let numberOfLiveNeighbors = numberOfLiveNeighbors + isAlive(row, col - 1);
    let numberOfLiveNeighbors = numberOfLiveNeighbors + isAlive(row, col + 1);

    if((numberOfLiveNeighbors < 2) | (numberOfLiveNeighbors > 3)) {
      return false;
    } else {
      let curSquare = getSquare(row, col);
      if(curSquare.alive() | (numberOfLiveNeighbors = 3)) {
        return true;
      }
    }

    return false;
  }

  method int isAlive(int row, int col) {
    var Square curSquare;

    if(~((row < rowCount) & (row > -1) & (col < colCount) & (col > -1))) {
      return 0;
    }

    let curSquare = getSquare(row, col);
    if (curSquare.alive()) {
      return 1;
    } else {
      return 0;
    }
  }

  method void awaken(int row, int col) {
    var Square curSquare;

    let curSquare = getSquare(row, col);
    do curSquare.awaken();
    do gridPainter.drawSquare(row, col);

    return;
  }


  method Square getSquare(int row, int col) {
    var Square curSquare;
    var Array curCol;

    let curCol = grid[col];
    let curSquare = curCol[row];

    return curSquare;
  }

  method boolean alive(int row, int col) {
    var Square curSquare;
    var boolean curSquareIsAlive;
    var Array curCol;

    let curCol = grid[col];
    let curSquare = curCol[row];

    return curSquare.alive();
  }

  method void dispose() {
    var int scratchColCount;
    var int scratchRowCount;
    var Array rowArray;
    var Square curSquare;

    let scratchColCount = colCount;
    while(~(scratchColCount = 0)) {
      let scratchColCount = scratchColCount - 1;
      let rowArray = grid[scratchColCount];

      let scratchRowCount = rowCount;
      while(~(scratchRowCount = 0)) {
        let scratchRowCount = scratchRowCount - 1;
        let curSquare = rowArray[scratchRowCount];
        do curSquare.dispose();
      }

      do rowArray.dispose();
    }

    do grid.dispose();
    do Memory.deAlloc(this);

    return;
  }

}
