// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {

  static int keyboard;

  /** Initializes the keyboard. */
  function void init() {
    let keyboard = 24576;
    return;
  }

  /**
  * Returns the character of the currently pressed key on the keyboard;
  * if no key is currently pressed, returns 0.
  *
  * Recognizes all ASCII characters, as well as the following keys:
  * new line = 128 = String.newline()
  * backspace = 129 = String.backspace()
  * left arrow = 130
  * up arrow = 131
  * right arrow = 132
  * down arrow = 133
  * home = 134
  * End = 135
  * page up = 136
  * page down = 137
  * insert = 138
  * delete = 139
  * ESC = 140
  * F1 - F12 = 141 - 152
  */
  function char keyPressed() {
    return Memory.peek(keyboard);
  }

  /**
  * Waits until a key is pressed on the keyboard and released,
  * then echoes the key to the screen, and returns the character
  * of the pressed key.
  */
  function char readChar() {
    var int keyPressed;

    while(Keyboard.keyPressed() = 0) {}

    let keyPressed = Keyboard.keyPressed();

    while(~(Keyboard.keyPressed() = 0)) {}

    if(~(keyPressed = String.backSpace())) {
      do Output.printChar(keyPressed);
    }

    return keyPressed;
  }

  /**
  * Displays the message on the screen, reads from the keyboard the entered
  * text until a newline character is detected, echoes the text to the screen,
  * and returns its value. Also handles user backspaces.
  */
  function String readLine(String message) {
    var String tempLine;
    var char currentChar;
    var boolean done;
    let done = false;
    let tempLine = String.new(512);

    do Output.printString(message);

    while(~done) {
      let currentChar = Keyboard.readChar();
      if(currentChar = String.newLine()) {
        let done = true;
      }
      else {
        if(currentChar = String.backSpace()) {
          do Output.backSpace();
        } else {
          do tempLine.appendChar(currentChar);
        }
      }
      do Sys.wait(30);
    }

    do Output.println();
    return tempLine;
  }

  /**
  * Displays the message on the screen, reads from the keyboard the entered
  * text until a newline character is detected, echoes the text to the screen,
  * and returns its integer value (until the first non-digit character in the
  * entered text is detected). Also handles user backspaces.
  */
  function int readInt(String message) {
    var String tempLine;
    let tempLine = Keyboard.readLine(message);
    return tempLine.intValue();
  }
}
