// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    /** Initializes the library. */
    function void init() {
      return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
      if(x < 0) {
        return -x;
      }

      return x;
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
      var int sum, shiftedX, i, j, targetBit;
      let i = 0;
      let shiftedX = x;

      while(i < 16) {
        let j = 0;
        let targetBit = 1;
        while(j < i) {
          let targetBit = targetBit + targetBit;
          let j = j + 1;
        }
        if(~((y & targetBit) = 0)) {
         let sum = sum + shiftedX;
        }
        let shiftedX = shiftedX + shiftedX;
        let i = i + 1;
      }

      return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
      var int q, result;
      var boolean negative;
      if((y < 0 | x < 0) & (x > 0 | y > 0)) {
        let negative = true;
      }

      let x = Math.abs(x);
      let y = Math.abs(y);

      if(y > x | y < 0) {
        return 0;
      }

      let q = Math.divide(x, y + y);
      if((x - (2 * q * y)) < y) {
        let result = q + q;
      } else {
        let result = q + q + 1;
      }

      if(negative) {
        return -result;
      }

      return result;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
      return 0;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
      if(a > b) {
        return a;
      }

      return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
      if(a < b) {
        return a;
      }

      return b;
    }
}
