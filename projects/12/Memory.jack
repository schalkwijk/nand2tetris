// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {

  static Array ram;
  static Array heap;
  static int head, tail;

  /** Initializes the class. */
  function void init() {
    let ram = 0;

    let heap = 2048;
    let tail = 0;
    let head = 0;
    let heap[head] = 0;
    let heap[head + 1] = 14335;

    return;
  }

  /** Returns the RAM value at the given address. */
  function int peek(int address) {
    return ram[address];
  }

  /** Sets the RAM value at the given address to the given value. */
  function void poke(int address, int value) {
    let ram[address] = value;
    return;
  }

  /** Finds an available RAM block of the given size and returns
  *  a reference to its base address. */
  function int alloc(int size) {
    var int totalSize, node, endOfFree, begOfFree;
    let totalSize = size + 2;

    let node = head;
    while(heap[node + 1] < totalSize & ~(heap[node] = 0)) {
      let node = heap[node];
    }

    if(heap[node + 1] < totalSize) {
      return -1;
    }

    let endOfFree = 1 + node + heap[node + 1];
    let begOfFree = endOfFree - totalSize;

    let heap[begOfFree] = -1;
    let heap[begOfFree + 1] = size;

    let heap[node + 1] = heap[node + 1] - totalSize;

    return heap + begOfFree + 2;
  }

  /** De-allocates the given object (cast as an array) by making
  *  it available for future allocations. */
  function void deAlloc(Array o) {
    return;
  }
}
